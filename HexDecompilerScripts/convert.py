#!/usr/bin/python# Convert Hex-Rays decompilation output to standard Cimport sysimport reif len(sys.argv) < 2:    print "Usage: " + sys.argv[0] + " <input file>"filename1 = sys.argv[1]filename2 = sys.argv[2]f_h = open(filename1)f_c = open(filename2)for ln in f_h:   print ln,p = re.compile(r'[\s]*[A-Z0-9]*\(([a-z0-9]*)\) =')for line in f_c:    # Convert unsigned__intN to uintN_t    # This is why we can't just use typedefs    line = re.sub("unsigned __int(\d+)", r"uint\1_t", line)    # Convert signed __intN to intN_)t    line = re.sub("signed __int(\d+)", r"int\1_t", line)    # Convert __intN to intN_t    line = re.sub("__int(\d+)", r"int\1_t", line)    # Convert _BYTE to char    line = re.sub("_BYTE", r"char", line)    # Convert _DWORD to unsigned int    line = re.sub("_DWORD", r"unsigned int", line)    # Convert _WORD to  int    line = re.sub("_WORD", r" int", line)    # Convert _QWORD to  unsigned long int    line = re.sub("_QWORD", r" unsigned long int", line)    # Convert __mode_t  -> mode_t    line = re.sub("__mode_t", r"mode_t", line)    # Convert __mode_t  -> mode_t    line = re.sub("__uid_t", r"uid_t", line)    line = re.sub("#include <defs.h>", r"", line)    line = re.sub("IO_putc", r"putc", line)    line = re.sub("IO_getc", r"getc", line)    line = re.sub("_IO_FILE", r"FILE", line)    line = re.sub("__noreturn", r"", line)    line = re.sub("j_strlen", r"strlen", line)    line = re.sub("_isoc99_scanf", r"scanf", line)    m  = re.match(p, line)    if m is not None:       line = re.sub(p, m.group(1)+" =", line)    print line,